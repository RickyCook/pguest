#!/usr/bin/env python
# vi: ft=python

import argparse
import os
import requests
import sys
import time
import signal

# Remove untrusted SSL warnings
requests.packages.urllib3.disable_warnings()

# Constants
SLEEP_TIME = 5
DEBUG_TIME = 120
TIMEOUT = 5
ERROR_BACKOFF = 60

# User data
global USERNAME
global PASSWORD


def sig_handle(signal, frame):
    sys.exit(0)


# Check google.com
def check_google(debug=False):
    try:
        check_google = requests.get(
            'http://google.com/',
            timeout=TIMEOUT,
            verify=False,
        )

        if 'server' in check_google.headers:
            # Valid google.com response
            if check_google.headers['server'] == 'gws':
                return 0

        if 'location' in check_google.headers:
            # Un-auth'd Pguest response
            if check_google.headers['location'] == \
                    'https://1.1.1.1/login.html?redirect=google.com/':
                return -1

    except Exception, e:
        # DNS fail?, No Internet access?, etc.
        if debug:
            print ""
            print "Exception doing google.com request: %s" % str(e)
        return 1

    if debug:
        # If 'server' isn't == 'gws', then what is it?
        if 'server' in check_google.headers:
            print ""
            print "google.com server header: %s" % (
                check_google.headers['server']
            )

    return -1


# Attempt PGuest auth
def pguest_auth(debug=False):
    try:
        print "Google server is not 'gws', attempting PGuest auth"

        pguest_form = {
            "username":      USERNAME,
            "password":      PASSWORD,
            "buttonClicked": 4,
            "err_flag":      0,
            "err_msg":       "",
            "info_flag":     0,
            "info_msg":      "",
            "redirect_url":  "",
        }

        pguest_attempt = requests.post(
            'https://1.1.1.1/login.html',
            data=pguest_form,
            timeout=10,
            verify=False,
        )

        content = pguest_attempt.text

        if debug:
            print ""
            print "PGUEST DEBUG INFO:"
            print "HTTP Status Code: %d" % pguest_attempt.status_code
            print "HTTP Headers: %s" % pguest_attempt.headers

        if pguest_attempt.status_code == 200:

            # Scan for failed login
            for line in content.split("\n"):
                if line == """<INPUT TYPE="hidden" NAME="err_flag" SIZE="16" MAXLENGTH="15" VALUE="1">""":
                    return 2

            return 0

        return -1

    except Exception, e:
        if debug:
            print ""
            print "Exception doing PGuest authentication: %s" % str(e)
        return 1


if __name__ == "__main__":

    signal.signal(signal.SIGINT, sig_handle)

    # Parse args
    parser = argparse.ArgumentParser(
        description="Check if google is accessable,"
            " else authenticate to PGuest",
    )
    # XXX Todo: make -u and -p mutually exclusive to -c
    parser.add_argument('-u', '--username',
        help='The username for authentication',
        default=None,
    )
    parser.add_argument('-p', '--password',
        help='The password for authentication',
        default=None,
    )
    parser.add_argument('-c', '--config',
        help='Path to username and password',
        default='~/.pguest',
    )
    args = parser.parse_args()

    USERNAME = None
    PASSWORD = None
    SOURCE = None

    config_file = os.path.expanduser(args.config)

    if os.path.isfile(config_file):
        SOURCE = "file"
        try:
            with open(config_file) as f:
                for line in f:
                    name, var = line.partition("=")[::2]
                    if name.lower().strip() == "username":
                        USERNAME = var.strip()
                    elif name.lower().strip() == "password":
                        PASSWORD = var.strip()
        except IOError:
            print "IOError on reading config file %s" % config_file
            exit(1)
    else:
        SOURCE = "args"
        USERNAME = args.username
        PASSWORD = args.password

    if (USERNAME is None) or (PASSWORD is None):
        sys.stdout.write("Incomplete credentials specified by %s" % SOURCE)
        if SOURCE == "file":
            print ": %s" % config_file
        else:
            print ""
        exit(1)

    first_time = True
    last_auth = 0
    debug = False

    while True:
        if first_time:
            first_time = False
            print ""
            print "Legend:"
            print u" \u2713: Everything is fine"
            print u" \u2717: PGuest authentication required"
            print u" !: PGuest authentication failed (non-200 HTTP response)"
            print u" ?: Couldn't reach google.com, or the PGuest login page"
            print ""
        elif (
                ((time.time() - last_auth) > DEBUG_TIME) and
                (debug)
        ):
            debug = False
            print ""
            print "Last auth was more than %d seconds ago," \
                " disabling extra debuging information." % DEBUG_TIME

        google_result = check_google(debug=debug)
        if google_result == -1:
            print u'\u2717 %s' % time.strftime('%Y-%m-%d %H:%M:%S')

            if (
                    ((time.time() - last_auth) < DEBUG_TIME) and
                    (not debug)
            ):
                debug = True
                print ""
                print "Last auth was less than %d seconds ago," \
                    " showing extra debuging information." % DEBUG_TIME

            pguest_result = pguest_auth(debug=debug)
            if pguest_result == -1:
                sys.stdout.write('! ')
                sys.stdout.flush()
            elif pguest_result == 0:
                last_auth = time.time()
                sys.stdout.write("PGuest auth returned 200")
                for i in range(0, SLEEP_TIME):
                    time.sleep(1)
                    sys.stdout.write(".")
                    sys.stdout.flush()
                print ""
                continue
            elif pguest_result == 2:
                print ""
                print "Login failed!"
                print "Your credentials are incorrect or expired."
                print ""
                time.sleep(ERROR_BACKOFF)
                continue
        elif google_result == 0:
            sys.stdout.write(u'\u2713 ')
            sys.stdout.flush()
        else:
            sys.stdout.write('? ')
            sys.stdout.flush()

        time.sleep(SLEEP_TIME)  # XXX Todo: Make configurable
